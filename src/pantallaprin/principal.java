/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pantallaprin;


import Adicionales.Abrir_xml;
import Archivo.consultar;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class principal extends javax.swing.JFrame{
    
    public static String strRut="C:\\";    
    public static List<JCheckBox> checkTags = new ArrayList<>();
    public principal(){
        initComponents();
        //setIconImage(new ImageIcon(getClass().getResource("../Imagenes/tes.jpg")).getImage());
        ((JPanel)getContentPane()).setOpaque(false); 
        //ImageIcon uno=new ImageIcon(this.getClass().getResource("/imagenes/factura-electrónica1.jpg"));
        JLabel fondo= new JLabel();
        //fondo.setIcon(uno); 
        getLayeredPane().add(fondo,JLayeredPane.FRAME_CONTENT_LAYER);
        //fondo.setBounds(0,0,uno.getIconWidth(),uno.getIconHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dskPrin = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuArc = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        AbrirFact = new javax.swing.JMenuItem();
        AbrirRet = new javax.swing.JMenuItem();
        AbrirNotDeb = new javax.swing.JMenuItem();
        AbrirNotCre = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        salir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        conPer = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Facturacion Electronica TES");
        setIconImages(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        dskPrin.setEnabled(false);
        dskPrin.setFocusCycleRoot(false);
        dskPrin.setFocusable(false);
        dskPrin.setOpaque(false);
        dskPrin.setPreferredSize(new java.awt.Dimension(800, 709));

        javax.swing.GroupLayout dskPrinLayout = new javax.swing.GroupLayout(dskPrin);
        dskPrin.setLayout(dskPrinLayout);
        dskPrinLayout.setHorizontalGroup(
            dskPrinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        dskPrinLayout.setVerticalGroup(
            dskPrinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        getContentPane().add(dskPrin);
        dskPrin.setBounds(0, 0, 780, 560);

        mnuArc.setMnemonic('a');
        mnuArc.setText("Archivo");

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/abrir.gif"))); // NOI18N
        jMenu3.setText("Abrir/Exportar...");

        AbrirFact.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        AbrirFact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/11186312_889997347730559_1770756948_n.jpg"))); // NOI18N
        AbrirFact.setText("Factura");
        AbrirFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirFactActionPerformed(evt);
            }
        });
        jMenu3.add(AbrirFact);

        AbrirRet.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        AbrirRet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/11119448_889997351063892_112299020_n.jpg"))); // NOI18N
        AbrirRet.setText("Retención");
        AbrirRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirRetActionPerformed(evt);
            }
        });
        jMenu3.add(AbrirRet);

        AbrirNotDeb.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        AbrirNotDeb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/11195443_889997344397226_1945921238_n.jpg"))); // NOI18N
        AbrirNotDeb.setText("Nota de Débito");
        AbrirNotDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirNotDebActionPerformed(evt);
            }
        });
        jMenu3.add(AbrirNotDeb);

        AbrirNotCre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        AbrirNotCre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/11212342_889997354397225_1619827904_n.jpg"))); // NOI18N
        AbrirNotCre.setText("Nota de Crédito");
        AbrirNotCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirNotCreActionPerformed(evt);
            }
        });
        jMenu3.add(AbrirNotCre);

        mnuArc.add(jMenu3);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/consultar.gif"))); // NOI18N
        jMenuItem1.setText("Consultar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuArc.add(jMenuItem1);
        mnuArc.add(jSeparator1);

        salir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/salir.png"))); // NOI18N
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        mnuArc.add(salir);

        jMenuBar1.add(mnuArc);

        jMenu2.setMnemonic('c');
        jMenu2.setText("Configuración");

        conPer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        conPer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/personalizar.jpg"))); // NOI18N
        conPer.setText("Personalizar");
        conPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conPerActionPerformed(evt);
            }
        });
        jMenu2.add(conPer);

        jMenuBar1.add(jMenu2);

        jMenu1.setMnemonic('y');
        jMenu1.setText("Ayuda");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ayuda.png"))); // NOI18N
        jMenuItem4.setText("Acerca de...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(800, 620));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_salirActionPerformed

    private void conPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conPerActionPerformed
//        //if(this.dskPrin.getComponentCount()==0){//permite abrir una sola vez la ventana
//            configuracion.Configuracion objArcXml=new configuracion.Configuracion();
//            dskPrin.add(objArcXml, JLayeredPane.DEFAULT_LAYER);
//            objArcXml.setVisible(true); 
//        //}
        String Confirmacion = VerificaExisteConfiguracion("factura");
        
        if (Confirmacion.contains("si")) {
         JOptionPane.showMessageDialog(null, "Es la primera vez que entra al sistema. Tiene que realizar las configuraciones.");
        }
        configuracion.Configuracion2 objConf = new configuracion.Configuracion2();
        objConf.setTitle("Personalizar");
                        dskPrin.add(objConf, JLayeredPane.DEFAULT_LAYER);
         objConf.setVisible(true);
    }//GEN-LAST:event_conPerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        JOptionPane d = null;        
        if(d.showConfirmDialog(this,"¿Está seguro que desea salir?", "Facturación Electrónica TES", JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION) 
        { System.exit(0); }
    }//GEN-LAST:event_formWindowClosing

    private void AbrirFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirFactActionPerformed
        //Se envia como parametro el nombre del comprobante seleccionado
//        String Confirmacion = VerificaExisteConfiguracion("factura");
//        
//        if (Confirmacion.contains("si")) {
//         JOptionPane.showMessageDialog(null, "Es la primera vez que entra al sistema. Tiene que realizar las configuraciones.");
//        }
//        configuracion.Configuracion2 objConf = new configuracion.Configuracion2();
//        objConf.setTitle("Configuraciones");
//                        dskPrin.add(objConf, JLayeredPane.DEFAULT_LAYER);
//         objConf.setVisible(true);
        abrirMenPan("factura");
    }//GEN-LAST:event_AbrirFactActionPerformed

    private void AbrirNotDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirNotDebActionPerformed
        //Se envia como parametro el nombre del comprobante seleccionado
        abrirMenPan("notaDebito");
    }//GEN-LAST:event_AbrirNotDebActionPerformed

    private void AbrirRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirRetActionPerformed
        //Se envia como parametro el nombre del comprobante seleccionado
        abrirMenPan("comprobanteRetencion");
    }//GEN-LAST:event_AbrirRetActionPerformed

    private void AbrirNotCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirNotCreActionPerformed
        //Se envia como parametro el nombre del comprobante seleccionado
        abrirMenPan("notaCredito");
    }//GEN-LAST:event_AbrirNotCreActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if(this.dskPrin.getComponentCount()==0){//permite abrir una sola vez la ventana
            Archivo.acercade objArcXml=new Archivo.acercade();
            dskPrin.add(objArcXml, JLayeredPane.DEFAULT_LAYER);
            objArcXml.setVisible(true); 
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //        if(this.dskPrin.getComponentCount()==0)
        //        {//permite abrir una sola vez la ventana
            ////            Directorio.CarDir objArcXml=new Directorio.CarDir();
            ////            dskPrin.add(objArcXml, JLayeredPane.DEFAULT_LAYER);
            ////            objArcXml.show();
            //        }
        consultar consul = new consultar();
        dskPrin.add(consul);
        consul.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //maximiza la pantalla principal al inicio del programa
                principal main =new principal();
                main.setExtendedState(MAXIMIZED_BOTH);
                main.setVisible(true);
                
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirFact;
    private javax.swing.JMenuItem AbrirNotCre;
    private javax.swing.JMenuItem AbrirNotDeb;
    private javax.swing.JMenuItem AbrirRet;
    private javax.swing.JMenuItem conPer;
    public static javax.swing.JDesktopPane dskPrin;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu mnuArc;
    private javax.swing.JMenuItem salir;
    // End of variables declaration//GEN-END:variables

    private boolean abrirArcXml(String strNomArc, JTextArea txaTex){
        boolean blnRes=true;
        try{
            String strCon=""; //Contenido del archivo.
            java.io.FileReader objFilRea=new java.io.FileReader(strNomArc);
            java.io.BufferedReader objBufRea=new java.io.BufferedReader(objFilRea);
            String strLin;
            while((strLin=objBufRea.readLine())!=null)
                strCon+=strLin + "\n";
            objBufRea.close();
            txaTex.setText(strCon);
        }
        catch(java.io.FileNotFoundException e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        catch(java.io.IOException e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }
         
    //Esta funcion recibe el nombre del comprobante seleccionado
    /*
        Se muestra una ventana para seleccionar el directorio del cual se
        realizara la lectura de los archivos XML.
        El nombre del comprobante seleccionado lo usamos solo para pasarlo
        de parametro al metodo "abrirArcXml"
    */
    private boolean abrirMenPan(String comprobante){
        File[] contenido = null;
        boolean blnRes=true;
        int cantidad=0;
        try{
            do{
                JFileChooser objFilCho=new JFileChooser(); //Creamos una nueva ventana de seleccion
                objFilCho.setDialogTitle("Abrir"); //Seteamos el titulo de la ventana "Abrir"
                objFilCho.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); //Se mostraran solo directorios(carpetas)
                objFilCho.setCurrentDirectory(new File(strRut)); //Nos ubicamos en el directorio por defecto
                
                String strXMLDireccion =obtieneDireccionXML(null);
                if (strXMLDireccion!="") {
                    objFilCho.setCurrentDirectory(new File(strXMLDireccion)); //Nos ubicamos en el directorio por defecto
                }
                if (objFilCho.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){ //Si se acepta la seleccion (boton "Abrir")
                    //Con el fin de mantener en memoria la ultima ubicacion visitada
                    strRut=objFilCho.getCurrentDirectory().getAbsolutePath(); //Actualizamos el directorio por defecto
                    File ruta = new File(strRut+"\\"+objFilCho.getSelectedFile().getName()); //Obtenemos carpeta seleccionada
                    contenido = ruta.listFiles(); //Obtenemos un arreglo con los archivos existentes de la carpeta seleccionada
                     //SI el directorio seleccionado no esta vacio
                    if(contenido.length > 0){
                        //Creamos la ventana para mostrar contenido del directorio seleccionado
                        Adicionales.Abrir_xml objDirUno = new Adicionales.Abrir_xml();
                        //Seteamos el titulo de la ventana con el nombre de la carpeta seleccionada
                        objDirUno.setTitle(objFilCho.getSelectedFile().getName());
                        dskPrin.add(objDirUno, JLayeredPane.DEFAULT_LAYER);
                        //abrimos archivos XML que sean del mismo tipo que el comprobante seleccionado
                        cantidad=abrirArcXml(comprobante, ruta, contenido, objDirUno);
                        //SI la cantidad de archivos encontrados es CERO
                        if(cantidad == 0)
                            JOptionPane.showMessageDialog(null, "No se encontro ningun(a) "+comprobante);
                        //SI se encontro al menos un archivos
                        else{
                            JOptionPane.showMessageDialog(null, cantidad+" "+comprobante+"(s) existente(s)");
                            objDirUno.setVisible(true);
                        }
                    }
                    // en caso de que el directorio seleccionado este vacio
                    else JOptionPane.showMessageDialog(null, "Carpeta Vacia");
                }
                // en caso de que se presione CANCELAR
                else break;
            }while(contenido.length==0 || cantidad==0); // Repetimos la seleccion mientras el directorio este vacio
                                                        // o si no contiene ningun archivo especificado
        }
        catch(Exception e){
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }

    //Esta funcion recibe el nombre del comprobante seleccionado, la ruta del directorio actual
    //un arreglo con los nombre de los archivos contenidos por el directorio seleccionado y 
    //el JFrame "Abrir_xml" en donde se agregaran los nombres de los archivos a convertir
    /*
        Se abre uno por uno los archivos existentes en el directorio
        para buscar la etiqueta del comprobante que se ha seleccionado
        para posteriormente agregar el nombre del archivo en el JPanel
    */
    private int abrirArcXml(String opcion, File ruta, File[] contenido, Abrir_xml Abrir) {
        int contador=0;
        try{
            for (File archivo_n : contenido) {
                //realizamos recorrido de los archivos
                File fileXML = new File(ruta+"\\"+archivo_n.getName()); //cargamos el contenido del n-ésimo contenido
                if (fileXML.isFile() && archivo_n.getName().toLowerCase().endsWith(".xml")) {//Nos aseguramos que sea un archivo xml
                    // Definimos una nueva instancia de un API para generar arbol XML
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    // Definimos nuevo arbol XML
                    DocumentBuilder builder = factory.newDocumentBuilder();
                    // Representamos el archivo XML especificado en el arbol
                    Document document = builder.parse(fileXML);
                    // SI no se encuentra la etiqueta <comprobante>  --> (documento sin autorizacion)
                    if (document.getElementsByTagName("comprobante").getLength() == 0) { //considerar esta parte del codigo para los filtros
                        // SI se encuentra una etiqueta con el nombre del comprobante seleccionado
                        if (document.getElementsByTagName(opcion).getLength()!=0) {
                            // Creamos un JLabel cuyo contenido sea el nombre del i-ésimo archivo
                            JLabel nombre = new JLabel(archivo_n.getName());
                            // Agregamos el JLabel al JPanel de la ventana
                             JCheckBox jCheckBox4= new JCheckBox(nombre.getText());
                        checkTags.add(jCheckBox4);
                         //Abrir.archivosTags.add(jCheckBox3);
                          Abrir.txaAbrFacXlm.add(jCheckBox4);
                            // Agregamos la ruta completa del archivo a convertir
                            JCheckBox jCheckBox3= new JCheckBox(archivo_n.getName());
                        checkTags.add(jCheckBox3);
                         Abrir.archivosTags.add(jCheckBox3);
                        //Abrir.archivosTags.add(checkTags);
                           //Abrir.archivos.add(ruta+"\\" + archivo_n.getName());
                            JCheckBox jCheckBox2= new JCheckBox(archivo_n.getName());
                        checkTags.add(jCheckBox2);
                        Abrir.nombresTags.add(jCheckBox2);
                            //Abrir.nombres.add(archivo_n.getName());
                            contador++; // Incrementamos la cuenta de los archivos encontrados
                        }
                        
                    } else {
                        String plain = document.getElementsByTagName("comprobante").item(0).getFirstChild().getNodeValue();
                        // Definimos una nueva instancia de un API para generar arbol XML
                        DocumentBuilderFactory sub_factory = DocumentBuilderFactory.newInstance();
                        // Definimos nuevo arbol XML
                        DocumentBuilder sub_builder = sub_factory.newDocumentBuilder();
                        // Representamos el archivo XML especificado en el arbol
                        // en este caso el archivo especificado es un texto plano (plain) por lo cual
                        // se genera un nuevo archivo con dicho texto (new InputSource)
                        Document sub_document = sub_builder.parse(new InputSource(new StringReader(plain)));
                        // SI se encuentra una etiqueta con el nombre del comprobante seleccionado
                        if (sub_document.getElementsByTagName(opcion).getLength()!=0) {
                            // Creamos un JLabel cuyo contenido sea el nombre del i-ésimo archivo
                            JLabel nombre = new JLabel(archivo_n.getName());
                            // Agregamos el JLabel al JPanel de la ventana
                            JCheckBox jCheckBox4= new JCheckBox(nombre.getText());
                        checkTags.add(jCheckBox4);
                         //Abrir.archivosTags.add(jCheckBox3);
                            Abrir.txaAbrFacXlm.add(jCheckBox4);
                                //Abrir.txaAbrFacXlm.add(nombre);
                            // Agregamos la ruta completa del archivo a convertir
                              JCheckBox jCheckBox3= new JCheckBox(archivo_n.getName());
                        checkTags.add(jCheckBox3);
                         Abrir.archivosTags.add(jCheckBox3);
                            Abrir.archivos.add(ruta+"\\" + archivo_n.getName());
                            JCheckBox jCheckBox2= new JCheckBox(archivo_n.getName());
                        checkTags.add(jCheckBox2);
                        Abrir.nombresTags.add(jCheckBox2);
                            Abrir.nombres.add(archivo_n.getName());
                            contador++; // Incrementamos la cuenta de los archivos encontrados
                        }
                    }
                }
            }
        }
        catch (IOException e) { System.out.println(e.getMessage()); }
        catch (ParserConfigurationException e) { System.out.println("ParserConfigurationException " + e.getMessage()); } 
        catch (SAXException e) { System.out.println("SAXException " + e.getMessage()); }  
        Abrir.tipo_comprobante = opcion;
        return contador;
    }
 private String VerificaExisteConfiguracion(String opcion) {
     String FacturaParametrizacion="";
      try {
    DocumentBuilderFactory fábricaCreadorDocumento = DocumentBuilderFactory.newInstance();
    DocumentBuilder creadorDocumento = fábricaCreadorDocumento.newDocumentBuilder();
    Document documento = creadorDocumento.parse("XMLs/Parametrizacion/parametrizacion.xml");
    //Obtener el elemento raíz del documento
    Element raiz = documento.getDocumentElement();

    //Obtener la lista de nodos que tienen etiqueta "EMPLEADO"
    NodeList listaEmpleados = raiz.getElementsByTagName("tabla");
    //Recorrer la lista de empleados
    for(int i=0; i<listaEmpleados.getLength(); i++) {   
        //Obtener de la lista un empleado tras otro
        Node empleado = listaEmpleados.item(i);
        //System.out.println("Parametrizacion ");
        //System.out.println("==========");    

        //Obtener la lista de los datos que contiene ese empleado
        NodeList datosEmpleado = empleado.getChildNodes();
        //Recorrer la lista de los datos que contiene el empleado
        for(int j=0; j<datosEmpleado.getLength(); j++) {
            //Obtener de la lista de datos un dato tras otro
            Node dato = datosEmpleado.item(j);
            if (dato.getNodeName().equals("esfacturaprimeravez")){
            //Comprobar que el dato se trata de un nodo de tipo Element
            if(dato.getNodeType()==Node.ELEMENT_NODE) {
                //Mostrar el nombre del tipo de dato
                //System.out.print(dato.getNodeName()+": ");
                //El valor está contenido en un hijo del nodo Element
                Node datoContenido = dato.getFirstChild();                        
                //Mostrar el valor contenido en el nodo que debe ser de tipo Text
                if(datoContenido!=null && datoContenido.getNodeType()==Node.TEXT_NODE)
                    
                   FacturaParametrizacion=datoContenido.getNodeValue();
            }}
        }
        //Se deja un salto de línea de separación entre cada empleado
       // System.out.println();
    }
 
} catch (SAXException ex) {
    System.out.println("ERROR: El formato XML del fichero no es correcto\n"+ex.getMessage());
    ex.printStackTrace();
} catch (IOException ex) {
    System.out.println("ERROR: Se ha producido un error el leer el fichero\n"+ex.getMessage());
    ex.printStackTrace();
} catch (ParserConfigurationException ex) {
    System.out.println("ERROR: No se ha podido crear el generador de documentos XML\n"+ex.getMessage());
    ex.printStackTrace();
}
    return FacturaParametrizacion;
    }
private String obtieneDireccionXML(String opcion) {
     String FacturaParametrizacion="";
      try {
    DocumentBuilderFactory fábricaCreadorDocumento = DocumentBuilderFactory.newInstance();
    DocumentBuilder creadorDocumento = fábricaCreadorDocumento.newDocumentBuilder();
    Document documento = creadorDocumento.parse("XMLs/Parametrizacion/parametrizacion.xml");
    //Obtener el elemento raíz del documento
    Element raiz = documento.getDocumentElement();

    //Obtener la lista de nodos que tienen etiqueta "EMPLEADO"
    NodeList listaEmpleados = raiz.getElementsByTagName("tabla");
    //Recorrer la lista de empleados
    for(int i=0; i<listaEmpleados.getLength(); i++) {   
        //Obtener de la lista un empleado tras otro
        Node empleado = listaEmpleados.item(i);
        //System.out.println("Parametrizacion ");
        //System.out.println("==========");    

        //Obtener la lista de los datos que contiene ese empleado
        NodeList datosEmpleado = empleado.getChildNodes();
        //Recorrer la lista de los datos que contiene el empleado
        for(int j=0; j<datosEmpleado.getLength(); j++) {
            //Obtener de la lista de datos un dato tras otro
            Node dato = datosEmpleado.item(j);
            if (dato.getNodeName().equals("rutaXml")){
            //Comprobar que el dato se trata de un nodo de tipo Element
            if(dato.getNodeType()==Node.ELEMENT_NODE) {
                //Mostrar el nombre del tipo de dato
                //System.out.print(dato.getNodeName()+": ");
                //El valor está contenido en un hijo del nodo Element
                Node datoContenido = dato.getFirstChild();                        
                //Mostrar el valor contenido en el nodo que debe ser de tipo Text
                if(datoContenido!=null && datoContenido.getNodeType()==Node.TEXT_NODE)
                    
                   FacturaParametrizacion=datoContenido.getNodeValue();
            }}
        }
        //Se deja un salto de línea de separación entre cada empleado
       // System.out.println();
    }
 
} catch (SAXException ex) {
    System.out.println("ERROR: El formato XML del fichero no es correcto\n"+ex.getMessage());
    ex.printStackTrace();
} catch (IOException ex) {
    System.out.println("ERROR: Se ha producido un error el leer el fichero\n"+ex.getMessage());
    ex.printStackTrace();
} catch (ParserConfigurationException ex) {
    System.out.println("ERROR: No se ha podido crear el generador de documentos XML\n"+ex.getMessage());
    ex.printStackTrace();
}
    return FacturaParametrizacion;
    }    
    private String obtieneDireccionXSL(String opcion) {
     String FacturaParametrizacion="";
      try {
    DocumentBuilderFactory fábricaCreadorDocumento = DocumentBuilderFactory.newInstance();
    DocumentBuilder creadorDocumento = fábricaCreadorDocumento.newDocumentBuilder();
    Document documento = creadorDocumento.parse("XMLs/Parametrizacion/parametrizacion.xml");
    //Obtener el elemento raíz del documento
    Element raiz = documento.getDocumentElement();

    //Obtener la lista de nodos que tienen etiqueta "EMPLEADO"
    NodeList listaEmpleados = raiz.getElementsByTagName("tabla");
    //Recorrer la lista de empleados
    for(int i=0; i<listaEmpleados.getLength(); i++) {   
        //Obtener de la lista un empleado tras otro
        Node empleado = listaEmpleados.item(i);
        //System.out.println("Parametrizacion ");
        //System.out.println("==========");    

        //Obtener la lista de los datos que contiene ese empleado
        NodeList datosEmpleado = empleado.getChildNodes();
        //Recorrer la lista de los datos que contiene el empleado
        for(int j=0; j<datosEmpleado.getLength(); j++) {
            //Obtener de la lista de datos un dato tras otro
            Node dato = datosEmpleado.item(j);
            if (dato.getNodeName().equals("rutaXls")){
            //Comprobar que el dato se trata de un nodo de tipo Element
            if(dato.getNodeType()==Node.ELEMENT_NODE) {
                //Mostrar el nombre del tipo de dato
                //System.out.print(dato.getNodeName()+": ");
                //El valor está contenido en un hijo del nodo Element
                Node datoContenido = dato.getFirstChild();                        
                //Mostrar el valor contenido en el nodo que debe ser de tipo Text
                if(datoContenido!=null && datoContenido.getNodeType()==Node.TEXT_NODE)
                    
                   FacturaParametrizacion=datoContenido.getNodeValue();
            }}
        }
        //Se deja un salto de línea de separación entre cada empleado
       // System.out.println();
    }
 
} catch (SAXException ex) {
    System.out.println("ERROR: El formato XML del fichero no es correcto\n"+ex.getMessage());
    ex.printStackTrace();
} catch (IOException ex) {
    System.out.println("ERROR: Se ha producido un error el leer el fichero\n"+ex.getMessage());
    ex.printStackTrace();
} catch (ParserConfigurationException ex) {
    System.out.println("ERROR: No se ha podido crear el generador de documentos XML\n"+ex.getMessage());
    ex.printStackTrace();
}
    return FacturaParametrizacion;
    }    
}

    
