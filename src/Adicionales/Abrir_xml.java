/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Adicionales;


import java.awt.Component;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import pantallaprin.principal;
import static pantallaprin.principal.dskPrin;


/**
 *
 * @author usuario
 */
public class Abrir_xml extends InternalFrameImagen {

     private String strRut="C:\\";  
     public String tipo_comprobante;
     public List <String> archivos;
     public List<JCheckBox> archivosTags;
     public List <String> nombres;
     public List<JCheckBox> nombresTags;
     public List <String> agregados;
     int p=1;
    
     /**
     * Creates new form Abrir_xml
     */

     public Abrir_xml() {
        initComponents();
        AbrGuardCom.setVisible(false);
        AbrCer.setVisible(true);
        
        //setImage("/imagenes/factura-electr√≥nica4.jpg");
        archivos = new ArrayList<>();          
        nombres = new ArrayList<>(); 
        nombresTags = new ArrayList<>();
        archivosTags = new ArrayList<>();
        agregados = new ArrayList<>();
        addItemsMes();
        addItemsAnio();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AbrGuardCom = new javax.swing.JButton();
        AbrExpoXls = new javax.swing.JButton();
        AbrProp = new javax.swing.JButton();
        AbrCer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaAbrFacXlm = new javax.swing.JPanel();
        cbbMes = new javax.swing.JComboBox();
        cbbAnio = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        AbrSelect = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Facturas ");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tes.jpg"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        AbrGuardCom.setText("Guardar Como ...");
        AbrGuardCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrGuardComActionPerformed(evt);
            }
        });

        AbrExpoXls.setText("Exportar .xls");
        AbrExpoXls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrExpoXlsActionPerformed(evt);
            }
        });

        AbrProp.setText("Configuraciones");
        AbrProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrPropActionPerformed(evt);
            }
        });

        AbrCer.setText("Cerrar");
        AbrCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrCerActionPerformed(evt);
            }
        });

        txaAbrFacXlm.setAutoscrolls(true);
        txaAbrFacXlm.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(txaAbrFacXlm);

        cbbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbMesActionPerformed(evt);
            }
        });

        cbbAnio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbbAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbAnioActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mes");

        AbrSelect.setText("Seleccionar Todo");
        AbrSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(AbrExpoXls, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AbrProp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AbrCer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(cbbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cbbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AbrGuardCom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(AbrSelect))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AbrExpoXls, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AbrGuardCom, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AbrProp, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(AbrSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AbrCer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        setBounds(0, 0, 552, 295);
    }// </editor-fold>//GEN-END:initComponents

    private void AbrGuardComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrGuardComActionPerformed
        guardarDirXls();    // TODO add your handling code here:
    }//GEN-LAST:event_AbrGuardComActionPerformed

    private void AbrPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrPropActionPerformed
       // Archivo.ProPanEti1 objProp=new Archivo.ProPanEti1();
         configuracion.Configuracion2 objProp=new configuracion.Configuracion2();
        dskPrin.add(objProp, JLayeredPane.DEFAULT_LAYER);
        objProp.setVisible(true); 
    }//GEN-LAST:event_AbrPropActionPerformed

    private void AbrExpoXlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrExpoXlsActionPerformed
     //  JOptionPane d = null;
        String Confirmacion = VerificaExisteConfiguracion("factura");
        if (Confirmacion.contains("si")) {
         JOptionPane.showMessageDialog(null, "Tiene que realizar las configuraciones.");
        }
        guardarDirXls();
        JOptionPane.showMessageDialog(null, "Transaccion Exitosa");
        this.dispose();
       
       
      //  if(JOptionPane.showConfirmDialog(this,"<html>¬øSeguro que desea convertir<br>los archivos a formatos XLS?</html>", "Facturaci√≥n Electr√≥nica TES", JOptionPane.YES_NO_OPTION   ) == JOptionPane.YES_OPTION){
        
      
        
    }//GEN-LAST:event_AbrExpoXlsActionPerformed
private String VerificaExisteConfiguracion(String opcion) {
     String FacturaParametrizacion="";
      try {
    DocumentBuilderFactory f√°bricaCreadorDocumento = DocumentBuilderFactory.newInstance();
    DocumentBuilder creadorDocumento = f√°bricaCreadorDocumento.newDocumentBuilder();
    Document documento = creadorDocumento.parse("XMLs/Parametrizacion/parametrizacion.xml");
    //Obtener el elemento ra√≠z del documento
    Element raiz = documento.getDocumentElement();

    //Obtener la lista de nodos que tienen etiqueta "EMPLEADO"
    NodeList listaEmpleados = raiz.getElementsByTagName("tabla");
    //Recorrer la lista de empleados
    for(int i=0; i<listaEmpleados.getLength(); i++) {   
        //Obtener de la lista un empleado tras otro
        Node empleado = listaEmpleados.item(i);
        //System.out.println("Parametrizacion ");
        //System.out.println("==========");    

        //Obtener la lista de los datos que contiene ese empleado
        NodeList datosEmpleado = empleado.getChildNodes();
        //Recorrer la lista de los datos que contiene el empleado
        for(int j=0; j<datosEmpleado.getLength(); j++) {
            //Obtener de la lista de datos un dato tras otro
            Node dato = datosEmpleado.item(j);
            if (dato.getNodeName().equals("esfacturaprimeravez")){
            //Comprobar que el dato se trata de un nodo de tipo Element
            if(dato.getNodeType()==Node.ELEMENT_NODE) {
                //Mostrar el nombre del tipo de dato
                //System.out.print(dato.getNodeName()+": ");
                //El valor est√° contenido en un hijo del nodo Element
                Node datoContenido = dato.getFirstChild();                        
                //Mostrar el valor contenido en el nodo que debe ser de tipo Text
                if(datoContenido!=null && datoContenido.getNodeType()==Node.TEXT_NODE)
                    
                   FacturaParametrizacion=datoContenido.getNodeValue();
            }}
        }
        //Se deja un salto de l√≠nea de separaci√≥n entre cada empleado
       // System.out.println();
    }
 
} catch (SAXException ex) {
    System.out.println("ERROR: El formato XML del fichero no es correcto\n"+ex.getMessage());
    ex.printStackTrace();
} catch (IOException ex) {
    System.out.println("ERROR: Se ha producido un error el leer el fichero\n"+ex.getMessage());
    ex.printStackTrace();
} catch (ParserConfigurationException ex) {
    System.out.println("ERROR: No se ha podido crear el generador de documentos XML\n"+ex.getMessage());
    ex.printStackTrace();
}
    return FacturaParametrizacion;
    }
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
  
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosing

    private void cbbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbMesActionPerformed

    private void cbbAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbAnioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbAnioActionPerformed

    private void AbrCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrCerActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_AbrCerActionPerformed

    private void AbrSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrSelectActionPerformed
        Boolean bandera;
        Component jCheckBox0 = txaAbrFacXlm.getComponent(0);
        bandera = ((JCheckBox) jCheckBox0).isSelected();
        for(Component jCheckBox1 :txaAbrFacXlm.getComponents()){
            if(jCheckBox1 instanceof JCheckBox){
                ((JCheckBox) jCheckBox1).setSelected(!bandera);
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_AbrSelectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbrCer;
    private javax.swing.JButton AbrExpoXls;
    private javax.swing.JButton AbrGuardCom;
    private javax.swing.JButton AbrProp;
    private javax.swing.JButton AbrSelect;
    private javax.swing.JComboBox cbbAnio;
    private javax.swing.JComboBox cbbMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JPanel txaAbrFacXlm;
    // End of variables declaration//GEN-END:variables
    
   private void ExportarEtiquetasXml(HSSFWorkbook workbook, Document document, String nombre){
        System.out.println("Exportando : "+nombre);
        char chrCont;
        boolean xa=false;
        String strAux="", tagContent="";
        try{
            NodeList nodeList = document.getElementsByTagName("*");
            for (int i = 0; i < nodeList.getLength(); i++){ 
                Element element = (Element)nodeList.item(i);
                if(element.getChildNodes().getLength()==1 && !element.getNodeName().contains(":")){
                    if(element.getFirstChild().getNodeType() == Node.TEXT_NODE && !element.getNodeName().equals("comprobante")){
                    }else
                    {
                        DocumentBuilderFactory sub_factory = DocumentBuilderFactory.newInstance();
                        DocumentBuilder sub_builder = sub_factory.newDocumentBuilder();
                        Document sub_document = sub_builder.parse(new InputSource(new StringReader(element.getFirstChild().getNodeValue())));
                        NodeList sub_nodeList = sub_document.getElementsByTagName("*");
                        for (int j = 0; j<sub_nodeList.getLength(); j++)
                        {
                            Element sub_element = (Element)sub_nodeList.item(j);
                            if(sub_element.getNodeName().equals("fechaEmision"))
                            {
//                                 System.out.println("Nombre: " + sub_element.getFirstChild().getNodeValue());
                            if(cbbAnio.getSelectedItem().toString().equals("All"))
                                xa=true;
                            else{
                                    for (int p=6; p<10; p++)
                                {
                                    chrCont=sub_element.getFirstChild().getNodeValue().charAt(p);
                                    strAux=strAux + chrCont;
                                    if(strAux.equals(cbbAnio.getSelectedItem().toString()))
                                    {
                                        strAux="";
                                        if(cbbMes.getSelectedItem().toString().equals("All"))
                                            xa=true;
                                        else
                                        {
                                            for (int o=3; o<5; o++)
                                            {
                                                chrCont=sub_element.getFirstChild().getNodeValue().charAt(o);
                                                strAux=strAux + chrCont;
                                                if(strAux.equals(cbbMes.getSelectedItem().toString()))
                                                {
                                                xa=true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            }
                         }
                    }
                }
            }
            
            
            
            if (xa)
            {
            if (p==1){
            HSSFSheet sheet = workbook.createSheet(tipo_comprobante+" "+(nombres.indexOf(nombre)+1));
            System.out.println("Primera vez creada");
            }
            HSSFSheet sheet= workbook.getSheetAt(0);
            HSSFCellStyle cellStyle = workbook.createCellStyle();
            HSSFRow rowTag = sheet.createRow(0);
            HSSFRow RowData = sheet.createRow(p);
            List listaFiltros = new ArrayList();
            listaFiltros=obtenerFiltrosTxt();
            
            for (int x = 0; x < listaFiltros.size(); x++) {
                HSSFCell cellTag = rowTag.createCell(x);
                cellTag.setCellValue((String) listaFiltros.get(x));
                cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                sheet.autoSizeColumn((short)x);
                cellTag.setCellStyle(cellStyle);
                
            for (int i = 0; i < nodeList.getLength(); i++){ 
                Element element = (Element)nodeList.item(i);   
                if(element.getChildNodes().getLength()==1 && !element.getNodeName().contains(":")){
                    if(element.getFirstChild().getNodeType() == Node.TEXT_NODE && !element.getNodeName().equals("comprobante")){
                        if (listaFiltros.get(x).equals(element.getNodeName().toUpperCase())) {
                            //System.out.println(element.getNodeName().toUpperCase());
                            HSSFCell cellData = RowData.createCell(x);
                            cellData.setCellValue(element.getFirstChild().getNodeValue());
                            sheet.autoSizeColumn((short)i);
                            cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                            break;
                        }
                    }
                    else{
                        DocumentBuilderFactory sub_factory = DocumentBuilderFactory.newInstance();
                        DocumentBuilder sub_builder = sub_factory.newDocumentBuilder();
                        Document sub_document = sub_builder.parse(new InputSource(new StringReader(element.getFirstChild().getNodeValue())));
                        NodeList sub_nodeList = sub_document.getElementsByTagName("*");
                        for (int j = 0; j<sub_nodeList.getLength(); j++){
                            Element sub_element = (Element)sub_nodeList.item(j);
                            if(sub_element.getNodeName().equals("fechaEmision"))
                            {
                                 //System.out.println("Nombre: " + sub_element.getFirstChild().getNodeValue());
                            }
                            if(sub_element.getNodeName().equals("Signature"))
                                break;
                            if(sub_element.getChildNodes().getLength()==1 && !sub_element.getNodeName().contains(":")){
                                if(sub_element.getFirstChild().getNodeType() == Node.TEXT_NODE){
                                   if (listaFiltros.get(x).equals(sub_element.getNodeName().toUpperCase())) {
                                    //System.out.println(sub_element.getNodeName().toUpperCase());
                                    HSSFCell cellData = RowData.createCell(x);
                                    cellData.setCellValue(sub_element.getFirstChild().getNodeValue());
                                    sheet.autoSizeColumn((short)j);
                                    cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                                    break;
                                } 
                                }
                            }
                        }
                    }
                }
            }
            }p++;
            }
            
        }
        catch (IOException e) { System.out.println(e.getMessage()); }
        catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "<html>Error al exportar archivo "+nombre+"<br>Verificar maximo de etiquetas soportadas [255]</html>");
        }
        catch (ParserConfigurationException e) { System.out.println("ParserConfigurationException " + e.getMessage()); } 
        catch (SAXException e) { System.out.println("SAXException " + e.getMessage()); }  
    }
   private List obtenerFiltrosTxt() {
         List listFiltro = new ArrayList();
         String strTexto="";
        try {   
            String cadena;
            FileReader f = new FileReader("XMLs/configuracion/factura/configuracion.txt");
            BufferedReader b = new BufferedReader(f);
            while((cadena = b.readLine())!=null) {
                //System.out.println(cadena);
                strTexto=strTexto +cadena;
            }
            b.close();
           StringTokenizer st = new StringTokenizer(strTexto, ";");

           while(st.hasMoreTokens()) {
            listFiltro.add(st.nextToken());
           }
        } catch (IOException ex) {
            Logger.getLogger(Ejemplo.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listFiltro;
    }
   
    private void addItemsMes()
    {
        cbbMes.removeAllItems();
        cbbMes.addItem("All");
        for(int i=1; i<=9; i++)
        {
            cbbMes.addItem("0" + i);
        }
        cbbMes.addItem("10");
        cbbMes.addItem("11");
        cbbMes.addItem("12");
    }
    
    private void addItemsAnio()
    {
        cbbAnio.removeAllItems();
        cbbAnio.addItem("All");
        for(int i=2014; i<=2035; i++)
        {
            cbbAnio.addItem(i);
        }
    }
    
    
    private boolean guardarArcXls(String strNomArc, List<String> archivos){
        boolean blnRes=true;

        try{
            // Se crea un nuevo libro de trabajo de EXCEL
            HSSFWorkbook workbook = new HSSFWorkbook(); 
            for (JCheckBox checkBox : principal.checkTags) {
                if (checkBox.isSelected()) {
                    for (String archivo_n : archivos){
                //cargamos el contenido del n-√©simo contenido
                        if (agregados.size()>0) {
                            Boolean boo =false;
                            for (int i = 0; i < agregados.size(); i++) {
                                if (checkBox.getText().equals(agregados.get(i))) {
                                    boo=true;
                                    break;
                                }                                
                            }
                            if (boo) {
                                break;
                            }
                        }
                        
                            
                        
                if (archivo_n.contains(checkBox.getText())) {
                       agregados.add(checkBox.getText());
                    File fileXML = new File(archivo_n); 
                // Definimos una nueva instancia de un API para generar arbol XML
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                // Definimos nuevo arbol XML
                DocumentBuilder builder = factory.newDocumentBuilder();
                // Representamos el archivo XML especificado en el arbol
                Document document = builder.parse(fileXML);
                //System.out.println("etiquetar archivo "+archivos.indexOf(archivo_n)+" de "+nombres.size());
                ExportarEtiquetasXml(workbook, document, nombres.get(archivos.indexOf(archivo_n)));
                       }
                }
                    }
                
                
            
            }
            try (FileOutputStream output = new FileOutputStream(new File(strNomArc))) {
                workbook.write(output);
            }
           Desktop.getDesktop().open(new File(strNomArc));
            
        }
        catch (FileNotFoundException e){ e.printStackTrace(); }
        catch (IOException e) { e.printStackTrace(); }
        catch (ParserConfigurationException e) { e.printStackTrace(); } 
        catch (SAXException e) { e.printStackTrace(); } 
        
        
        return blnRes;
    }
    
    private void guardarDirXls(){
        try{
            String strArc;
            JFileChooser objFilCho=new JFileChooser();
            objFilCho.setDialogTitle("Guardar Como");
            objFilCho.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            objFilCho.setCurrentDirectory(new File(strRut));
            FileNameExtensionFilter objFilNamExt=new FileNameExtensionFilter("Archivos.xls", "xls", "XLS");
            objFilCho.setFileFilter(objFilNamExt);
            if (objFilCho.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
                strRut=objFilCho.getCurrentDirectory().getAbsolutePath() + "\\";
                strArc=objFilCho.getSelectedFile().getPath();
                //Si no tiene la extensi√≥n "xls" agregarsela.
                if (!strArc.toLowerCase().endsWith(".xls"))
                    strArc+=".xls";
                if (guardarArcXls(strArc, archivos))
                    ((Abrir_xml)dskPrin.getSelectedFrame()).setTitle(strArc);
            }
            else
                System.out.println("El usuario cancel√≥");
        }catch(Exception e){
           e.printStackTrace();
        }
    }    
}
